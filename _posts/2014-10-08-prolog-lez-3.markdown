---
layout: post
title:  "Prolog Lez 08/10"
date:   2014-10-8 18:00:00
categories: Prolog
---

Esercizi lezione 3 Prolog

{% highlight prolog %}
bst(node(15,
	node(10,
		node(5,
			node(2,void,void),
			node(7,void,void)),
		node(12,
			node(11,void,void),
			node(14,void,void))
		),
	node(20,
		node(18,
			node(16,void,void),
			node(19,void,void)),
		node(21,
			void,
			node(25,void,void))
		))
).

same_bst1(node(5,node(4,void,void),node(6,void,void))).

same_bst2(node(10,node(5,void,void),void)).

/* Length */

len([],0).
len([_|Xs],M):-
	len(Xs,N),
	M is N + 1.

/* Treesum */

treesum(void,0).
treesum(node(X,L,R),S):-
	treesum(L,Y),
	treesum(R,Z),
	S is X + Y + Z.

run_treesum(S):-
	bst(X),
	treesum(X,S).

/* Samesum */

samesum([]).
samesum([_]).
samesum([X,Y|Xs]):-
	treesum(X,Z),
	treesum(Y,Z),
	samesum([Y|Xs]).

run_samesum(X,Y):-
	same_bst1(X),
	same_bst2(Y),
	samesum([X,Y]).

samesums([]).
samesums([_]).
samesums([T1,T2|Ts]):-
	treesum(T1,X),
	samesumsaux(X,[T2|Ts]).

samesumsaux(_,[]).
samesumsaux(X,[T|Ts]):-
	treesum(T,X),
	samesumsaux(X,Ts).

run_samesums(X,Y):-
	same_bst1(X),
	same_bst2(Y),
	samesums([X,Y]).


/* Factorial */

fact(0,1).
fact(N,Z):-
	N > 0,
	X is N - 1,
	fact(X,Y),
	Z is N * Y.

/* Reverse Length */

rev_len([],0).
rev_len([_|Xs],N):-
	N > 0,
	M is N - 1,
	rev_len(Xs,M).

/* Partition (Quicksort) */

partition(_,[],[],[]).
partition(N,[X|Xs],[X|Ls],Bs):-
	X =< N,
	partition(N,Xs,Ls,Bs).

partition(N,[X|Xs],Ls,[X|Bs]):-
	X > N,
	partition(N,Xs,Ls,Bs).

/* Quicksort (append) */

quicksort1([],[]).
quicksort1([X|Xs],Ws):-
	partition(X,Xs,Ls,Bs),
	quicksort1(Ls,Ys),
	quicksort1(Bs,Zs),
	app(Ys,[X|Zs],Ws).

app([],Xs,Xs).
app([X|Xs],Ys,[X|Zs]):-
	app(Xs,Ys,Zs).

/* Quicksort (accumulatore) */

quicksort2(Xs,Ys):-
	quick_aux(Xs,[],Ys).

quick_aux([],Xs,Xs).
quick_aux([X|Xs],Ys,Rs):-
	partition(X,Xs,Ls,Bs),
	quick_aux(Bs,Ys,Zs),
	quick_aux(Ls,[X|Zs],Rs).
{% endhighlight %}
